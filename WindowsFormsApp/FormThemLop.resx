<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="guna2Elipse1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>